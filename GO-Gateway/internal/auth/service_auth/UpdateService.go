package service_auth

import (
	"errors"
	"log"

	"guru-game/models"
)

// UpdateUser ‡∏£‡∏±‡∏ö models.User ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ username ‡∏´‡∏£‡∏∑‡∏≠ email, ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏´‡∏≤ user ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å token ‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏±‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func UpdateUser(input *models.User, tokenUserID int64) (*models.User, error) {
	if input == nil {
		return nil, errors.New("input cannot be nil")
	}

	// ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ username ‡∏´‡∏£‡∏∑‡∏≠ email
	if input.Username == "" && input.Email == "" {
		log.Println("Missing username or email")
		return nil, errors.New("username or email required")
	}

	// ‡∏´‡∏≤ user ‡∏ï‡∏±‡∏ß‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å repo
	var user *models.User
	var err error

	if input.Username != "" {
		user, err = repo.GetByUsername(input.Username)
	} else {
		user, err = repo.GetByEmail(input.Email)
	}

	if err != nil {
		log.Println("User not found:", err)
		return nil, errors.New("user not found")
	}

	log.Printf("üîé Found user ID: %d\n", user.ID)

	// ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤ ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å token ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö ID ‡∏Ç‡∏≠‡∏á user ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
	if user.ID != tokenUserID {
		log.Println("User ID from token does not match the user being updated")
		return nil, errors.New("you can only update your own information")
	}

	// ‡πÉ‡∏ä‡πâ ID ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á user ‡∏°‡∏≤‡πÄ‡∏ã‡πá‡∏ï‡πÉ‡∏ô input
	input.ID = user.ID

	// ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ ID ‡πÑ‡∏´‡∏°
	if input.ID == 0 {
		log.Println("Missing user ID after lookup")
		return nil, errors.New("missing user ID for update")
	}

	// Call repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
	updatedUser, err := repo.Update(input)
	if err != nil {
		log.Printf("Failed to update user ID %d: %v\n", input.ID, err)
		return nil, err
	}

	log.Printf("User ID %d updated successfully.\n", updatedUser.ID)
	return updatedUser, nil
}